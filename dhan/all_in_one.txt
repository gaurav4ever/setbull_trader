DHAN APIs - Place an Order

Endpoint
POST https://api.dhan.co/v2/orders

Description
This API allows you to place a new order.

Request

Headers
access-token    string    required    Authentication token

Body Parameters
dhanClientId        string         User specific identification generated by Dhan
correlationId       string         The user/partner generated id for tracking back (0-25 characters)
transactionType     string         Required. Signifies the type of transaction whether it's BUY or SELL
                                   Allowed values: BUY, SELL
exchangeSegment     string         Required. Exchange and segment information
                                   Allowed values: NSE_EQ, NSE_FNO, BSE_EQ, BSE_FNO, MCX_COMM
productType         string         Type of product
                                   Allowed values: CNC, INTRADAY, MARGIN, MTF, CO, BO
orderType           string         Type of order
                                   Allowed values: LIMIT, MARKET, STOP_LOSS, STOP_LOSS_MARKET
validity            string         Validity of the order
                                   Allowed values: DAY, IOC
securityId          string         Exchange standard identification for each scrip
quantity            integer        Number of shares for the order
disclosedQuantity   integer        Number of shares visible in the market depth
price               float          Price at which the order is requested to execute
triggerPrice        float          Price at which the order is triggered
afterMarketOrder    boolean        Flag to inform that the order placed is After Market Order
amoTime             string         Flag to inform after what time AMO is pumped
                                   Allowed values: OPEN, OPEN_30, OPEN_60, PRE_OPEN
boProfitValue       float          Bracket order Target price
boStopLossValue     float          Bracket Order/Cover Order Stop Loss Price

Exchange Segment Details
NSE_EQ              NSE            Equity Cash
NSE_FNO             NSE            Futures & Options
BSE_EQ              BSE            Equity Cash
BSE_FNO             BSE            Futures & Options
MCX_COMM            MCX            Commodity

Product Type Details
CNC                 Cash & Carry for equity deliveries
INTRADAY            Intraday for Equity, Futures & Options
MARGIN              Carry Forward in Futures & Options
CO                  Cover Order; entry and stop loss
BO                  Bracket Order; entry, stop loss & target price
MTF                 Margin Traded Fund

Note: CO & BO product types will be valid only for Intraday

Order Type Details
LIMIT               For Limit Order types
MARKET              For Market Order types
STOP_LOSS           For Stop Loss Limit orders
STOP_LOSS_MARKET    For Stop Loss Market orders

Validity Details
DAY                 Valid till end of day
IOC                 Immediate or Cancel

Response

Status Code: 200 (Successful operation)

Response Body
orderId             string         Order specific identification generated by Dhan
orderStatus         string         Status of the order

Examples

cURL Example
curl --request POST \
  --url https://api.dhan.co/v2/orders \
  --header 'Accept: application/json' \
  --header 'Content-Type: application/json' \
  --header 'access-token: YOUR_ACCESS_TOKEN' \
  --data '{
  "dhanClientId": "string",
  "correlationId": "string",
  "transactionType": "BUY",
  "exchangeSegment": "NSE_EQ",
  "productType": "CNC",
  "orderType": "LIMIT",
  "validity": "DAY",
  "securityId": "string",
  "quantity": 10,
  "disclosedQuantity": 5,
  "price": 100.50,
  "triggerPrice": 0,
  "afterMarketOrder": false,
  "amoTime": "OPEN",
  "boProfitValue": 0,
  "boStopLossValue": 0
}'

Go Example
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io"
)

func main() {
	url := "https://api.dhan.co/v2/orders"
	payload := strings.NewReader(`{
  "dhanClientId": "string",
  "correlationId": "string",
  "transactionType": "BUY",
  "exchangeSegment": "NSE_EQ",
  "productType": "CNC",
  "orderType": "LIMIT",
  "validity": "DAY",
  "securityId": "string",
  "quantity": 10,
  "disclosedQuantity": 5,
  "price": 100.50,
  "triggerPrice": 0,
  "afterMarketOrder": false,
  "amoTime": "OPEN",
  "boProfitValue": 0,
  "boStopLossValue": 0
}`)
	
	req, _ := http.NewRequest("POST", url, payload)
	req.Header.Add("access-token", "YOUR_ACCESS_TOKEN")
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "application/json")
	
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	
	fmt.Println(res)
	fmt.Println(string(body))
}

Example Response
{
  "orderId": "string",
  "orderStatus": "TRANSIT"
}




---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------

Modify Pending Order

Endpoint
PUT https://api.dhan.co/v2/orders/{order-id}

Description
This API allows you to modify a pending order in the orderbook. The fields that can be modified are price, quantity, order type, and validity.

Request

Path Parameters
order-id        string        required        Order identifier

Headers
access-token    string        required        Authentication token

Body Parameters
dhanClientId        string        User specific identification generated by Dhan
orderId             string        Order specific identification generated by Dhan
orderType           string        Type of order
                                  Allowed values: LIMIT, MARKET, STOP_LOSS, STOP_LOSS_MARKET
legName             string        Order leg of Forever Order where modification is to be done
                                  Allowed values: ENTRY_LEG, STOP_LOSS_LEG, TARGET_LEG, NA
quantity            integer       Number of shares for the order
price               float         Price at which order is placed
disclosedQuantity   integer       Number of shares visible (Keep more than 30% of quantity)
triggerPrice        float         Price at which the order is triggered, in case of SL-M & SL-L
validity            string        Validity of the order
                                  Allowed values: DAY, IOC

Order Type Details
LIMIT               For Limit Order types
MARKET              For Market Order types
STOP_LOSS           For Stop Loss Limit orders
STOP_LOSS_MARKET    For Stop Loss Market orders

Validity Details
DAY                 Valid till end of day
IOC                 Immediate or Cancel

Response

Status Code: 200 (Successful operation)

Response Body
orderId         string        Order specific identification generated by Dhan
orderStatus     string        Status of the order

Order Status Values
TRANSIT         Did not reach the exchange server
PENDING         Reached at exchange end, awaiting execution
REJECTED        Rejected at exchange/broker's end
CANCELLED       Cancelled by user
PART_TRADED     Partially Executed
TRADED          Executed
EXPIRED         Validity of order is expired
MODIFIED        Order was modified
TRIGGERED       Order was triggered

Examples

cURL Example
curl --request PUT \
  --url https://api.dhan.co/v2/orders/{order-id} \
  --header 'Accept: application/json' \
  --header 'Content-Type: application/json' \
  --header 'access-token: YOUR_ACCESS_TOKEN' \
  --data '{
  "dhanClientId": "string",
  "orderId": "string",
  "orderType": "LIMIT",
  "legName": "ENTRY_LEG",
  "quantity": 10,
  "price": 100.50,
  "disclosedQuantity": 5,
  "triggerPrice": 0,
  "validity": "DAY"
}'

Go Example
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io"
)

func main() {
	url := "https://api.dhan.co/v2/orders/{order-id}"
	payload := strings.NewReader(`{
  "dhanClientId": "string",
  "orderId": "string",
  "orderType": "LIMIT",
  "legName": "ENTRY_LEG",
  "quantity": 10,
  "price": 100.50,
  "disclosedQuantity": 5,
  "triggerPrice": 0,
  "validity": "DAY"
}`)
	
	req, _ := http.NewRequest("PUT", url, payload)
	req.Header.Add("access-token", "YOUR_ACCESS_TOKEN")
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "application/json")
	
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	
	fmt.Println(res)
	fmt.Println(string(body))
}

Example Response
{
  "orderId": "string",
  "orderStatus": "TRANSIT"
}

---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------


Get All Trades

Endpoint
GET https://api.dhan.co/v2/trades

Description
This API allows you to retrieve an array of all trades executed in a day.

Request

Headers
access-token    string    required    Authentication token

Response

Status Code: 200 (Successful operation)

Response Body
Array of trade objects with the following properties:

dhanClientId       string        User specific identification generated by Dhan
orderId            string        Order specific identification generated by Dhan
exchangeOrderId    string        Order specific identification generated by Exchange
exchangeTradeId    string        Trade specific identification, generated by exchange once order is executed
transactionType    string        Signifies the type of transaction whether it's BUY or SELL
                                 Allowed values: BUY, SELL
exchangeSegment    string        Exchange and segment information
                                 Allowed values: NSE_EQ, NSE_FNO, BSE_EQ, BSE_FNO, MCX_COMM
productType        string        Type of product
                                 Allowed values: CNC, INTRADAY, MARGIN, MTF, CO, BO
orderType          string        Type of order
                                 Allowed values: LIMIT, MARKET, STOP_LOSS, STOP_LOSS_MARKET
tradingSymbol      string        Exchange standard trading symbol
customSymbol       string        Custom trading symbol
securityId         string        Exchange standard identification for each scrip
tradedQuantity     integer       Number of shares traded
tradedPrice        float         Price at which trade executed
createTime         string        Record create date time
updateTime         string        Record update date time
exchangeTime       string        Time at which order reached at exchange end
drvExpiryDate      string        For F&O, expiry date of contract
drvOptionType      string        For Options, type CALL or PUT
                                 Allowed values: CALL, PUT, NA
drvStrikePrice     float         For Options, Strike Price

Exchange Segment Details
NSE_EQ             NSE           Equity Cash
NSE_FNO            NSE           Futures & Options
BSE_EQ             BSE           Equity Cash
BSE_FNO            BSE           Futures & Options
MCX_COMM           MCX           Commodity

Product Type Details
CNC                Cash & Carry for equity deliveries
INTRADAY           Intraday for Equity, Futures & Options
MARGIN             Carry Forward in Futures & Options
CO                 Cover Order; entry and stop loss
BO                 Bracket Order; entry, stop loss & target price
MTF                Margin Traded Fund

Note: CO & BO product types will be valid only for Intraday

Order Type Details
LIMIT              For Limit Order types
MARKET             For Market Order types
STOP_LOSS          For Stop Loss Limit orders
STOP_LOSS_MARKET   For Stop Loss Market orders

Examples

cURL Example
curl --request GET \
  --url https://api.dhan.co/v2/trades \
  --header 'Accept: application/json' \
  --header 'access-token: YOUR_ACCESS_TOKEN'

Go Example
package main

import (
	"fmt"
	"net/http"
	"io"
)

func main() {
	url := "https://api.dhan.co/v2/trades"
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("access-token", "YOUR_ACCESS_TOKEN")
	req.Header.Add("Accept", "application/json")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	fmt.Println(res)
	fmt.Println(string(body))
}

Example Response
[
  {
    "dhanClientId": "string",
    "orderId": "string",
    "exchangeOrderId": "string",
    "exchangeTradeId": "string",
    "transactionType": "BUY",
    "exchangeSegment": "NSE_EQ",
    "productType": "CNC",
    "orderType": "LIMIT",
    "tradingSymbol": "string",
    "customSymbol": "string",
    "securityId": "string",
    "tradedQuantity": 10,
    "tradedPrice": 100.50,
    "createTime": "2023-03-14T10:30:45Z",
    "updateTime": "2023-03-14T10:30:45Z",
    "exchangeTime": "2023-03-14T10:30:40Z",
    "drvExpiryDate": "2023-03-30",
    "drvOptionType": "CALL",
    "drvStrikePrice": 105.00
  }
]


---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------



Get Trade History

Endpoint
GET https://api.dhan.co/v2/trades/{from-date}/{to-date}/{page-number}

Description
This API allows the user to retrieve trade history. Often during partial trades or Bracket/Cover Orders, traders get confused in reading trades from tradebook. The response of the API will include all the trades generated for a particular order id.

Request

Path Parameters
from-date         string        required       Date format: yyyy-MM-dd
to-date           string        required       Date format: yyyy-MM-dd
page-number       string        required       Default value: 0

Headers
access-token      string        required       Authentication token

Response

Status Code: 200 (Successful operation)

Response Body
Array of trade objects with the following properties:

dhanClientId                  string        User specific identification generated by Dhan
orderId                       string        Order specific identification generated by Dhan
exchangeOrderId               string        Order specific identification generated by Exchange
exchangeTradeId               string        Trade specific identification, generated by exchange once order is executed
transactionType               string        Signifies the type of transaction whether it's BUY or SELL
                                            Allowed values: BUY, SELL
exchangeSegment               string        Exchange and segment information
                                            Allowed values: NSE_EQ, NSE_FNO, BSE_EQ, BSE_FNO, MCX_COMM
productType                   string        Type of product
                                            Allowed values: CNC, INTRADAY, MARGIN, MTF, CO, BO
orderType                     string        Type of order
                                            Allowed values: LIMIT, MARKET, STOP_LOSS, STOP_LOSS_MARKET
customSymbol                  string        Custom trading symbol
securityId                    string        Exchange standard identification for each scrip
tradedQuantity                integer       Number of shares traded
tradedPrice                   float         Price at which trade executed
isin                          string        Isin Number of that scrip
instrument                    string        Instrument of that scrip
sebiTax                       double        SEBI tax
stt                           double        STT (Securities Transaction Tax)
brokerageCharges              double        Brokerage Charges
serviceTax                    double        Service tax
exchangeTransactionCharges    double        Exchange Transaction Charges
stampDuty                     double        Stamp duty paid on transfer of shares
createTime                    string        Record create date time
updateTime                    string        Record update date time
exchangeTime                  string        Time at which order reached at exchange end
drvExpiryDate                 string        For F&O, expiry date of contract
drvOptionType                 string        For Options, type CALL or PUT
                                            Allowed values: CALL, PUT, NA
drvStrikePrice                float         For Options, Strike Price

Exchange Segment Details
NSE_EQ                        NSE           Equity Cash
NSE_FNO                       NSE           Futures & Options
BSE_EQ                        BSE           Equity Cash
BSE_FNO                       BSE           Futures & Options
MCX_COMM                      MCX           Commodity

Product Type Details
CNC                           Cash & Carry for equity deliveries
INTRADAY                      Intraday for Equity, Futures & Options
MARGIN                        Carry Forward in Futures & Options
CO                            Cover Order; entry and stop loss
BO                            Bracket Order; entry, stop loss & target price
MTF                           Margin Traded Fund

Note: CO & BO product types will be valid only for Intraday

Order Type Details
LIMIT                         For Limit Order types
MARKET                        For Market Order types
STOP_LOSS                     For Stop Loss Limit orders
STOP_LOSS_MARKET              For Stop Loss Market orders

Examples

cURL Example
curl --request GET \
  --url https://api.dhan.co/v2/trades/2023-03-01/2023-03-15/0 \
  --header 'Accept: application/json' \
  --header 'access-token: YOUR_ACCESS_TOKEN'

Go Example
package main

import (
	"fmt"
	"net/http"
	"io"
)

func main() {
	url := "https://api.dhan.co/v2/trades/2023-03-01/2023-03-15/0"
	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Add("access-token", "YOUR_ACCESS_TOKEN")
	req.Header.Add("Accept", "application/json")
	res, _ := http.DefaultClient.Do(req)
	defer res.Body.Close()
	body, _ := io.ReadAll(res.Body)
	fmt.Println(res)
	fmt.Println(string(body))
}

Example Response
[
  {
    "dhanClientId": "string",
    "orderId": "string",
    "exchangeOrderId": "string",
    "exchangeTradeId": "string",
    "transactionType": "BUY",
    "exchangeSegment": "NSE_EQ",
    "productType": "CNC",
    "orderType": "LIMIT",
    "customSymbol": "string",
    "securityId": "string",
    "tradedQuantity": 10,
    "tradedPrice": 100.50,
    "isin": "INE123A01016",
    "instrument": "EQ",
    "sebiTax": 0.01,
    "stt": 0.1,
    "brokerageCharges": 15.75,
    "serviceTax": 2.84,
    "exchangeTransactionCharges": 3.25,
    "stampDuty": 0.05,
    "createTime": "2023-03-14T10:30:45Z",
    "updateTime": "2023-03-14T10:30:45Z",
    "exchangeTime": "2023-03-14T10:30:40Z",
    "drvExpiryDate": "2023-03-30",
    "drvOptionType": "CALL",
    "drvStrikePrice": 105.00
  }
]