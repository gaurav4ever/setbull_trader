# Volatility Squeeze Trading Strategy

## 1. Philosophy & Goal

The core philosophy is to identify and engage with stocks during periods of exceptionally low volatility, anticipating a significant price movement (expansion). 
This strategy aims to position us as early participants, entering before the crowd and capturing the majority of the impending move. 
We are moving away from chasing momentum and instead focusing on identifying the conditions that precede it.

The primary goal is to achieve substantial returns (targeting 20%, 50%, up to 100%) 
by systematically finding these low-risk entry points ahead of explosive breakouts.

## 2. Methodology

### Primary Indicator: Bollinger Bands
We will use Bollinger Bands on the **daily** timeframe as the primary tool to quantify volatility.

### Key Metric: Normalized Bollinger Band Width (BBW)
To measure volatility consistently across different stocks and price levels, we will use a normalized Bollinger Band Width.

- **Formula:** `BBW = (Upper Bollinger Band - Lower Bollinger Band) / Middle Bollinger Band (20-period SMA)`

A low BBW value indicates low volatility, and a high value indicates high volatility.

## 3. Stock Selection Process (The "Screener")

The screener is designed to find stocks that are currently in a "volatility squeeze."

1.  **Universe:** All stocks with available daily candle data.
2.  **Timeframe:** Daily.
3.  **Bollinger Bands Settings:**
    -   **Period:** 20 days
    -   **Standard Deviations:** 2
4.  **Squeeze Condition:**
    - The screener will identify stocks where the **current daily BBW is at its lowest point over a 126-day lookback period** (approximately 6 months of trading days).
5.  **Confirmation - Range Contraction:**
    1. To ensure we are in a stable consolidation phase, 
    2. We will first find the Volatility avg squeeze range where stock has performed the best in last n days. We will store it in a new table column in the same table 
        2.1 In the table if the time_interval is "day" then, the column value should be the most preferred squeeze range for the stock. 
    3. Point 2 will be a one time activity. Once saved, this data will get use in Back testing the daily analysis.
    4. Once we have point 2 data, we wil keep checking the following things
     4.1 A range at any point of time in the available data. So that i can be alert and looking into the screen, serious trading opportunity. 
        4.1.1 There will be n number of things i'll be observing once all these required data is there with me.
        4.1.1.1 Like: moving sideways over the last 3-5 trading sessions. 
        4.1.1.2 Like: Bullish stocks (daily level) are moving down intraday and volatility is decreasing. Tradable squeeze range achieved.
     4.2 Name it as tradable range. tradeable_bb_range
     4.3 After that I will do in next Knowledge base iteration. (ANalyze -> Find -> quantify -> backest -> automate backtest -> decision -> automate the trading system)
    
    This confirms the squeeze is established.

---------------------------


# Technical Deep Dive: Bollinger Band Width (BBW) Volatility Analysis

## 1. Executive Summary

This document provides a comprehensive technical overview of the 
Bollinger Band Width (BBW) volatility analysis pipeline. 
The primary objective of this pipeline is to systematically screen 
a universe of stocks to identify those currently experiencing periods of unusually low volatility,
often referred to as a "volatility squeeze." The underlying hypothesis is that such periods 
of consolidation are frequently precursors to significant price expansions, 
offering high-potential, early entry opportunities.

The methodology is implemented in the Python script 
`python_strategies/polars/analysis/analyze_all_stock_volatility.py` 
and is guided by the principles outlined in `kb/5.1_volatility_squeeze_strategy.txt`.

## 2. Core Concept: The Volatility Squeeze

Volatility in financial markets is cyclical. 
Periods of low volatility (consolidation) are typically followed by periods of high volatility
(expansion or breakouts). A "volatility squeeze" occurs when a stock's price trades in an unusually narrow range for an extended period, causing its Bollinger Bands to contract or "squeeze" together.

Our strategy is to detect this squeeze condition just as it's happening, 
positioning us to capitalize on the subsequent price move, regardless of direction.

## 3. Key Metric: Normalized Bollinger Band Width (BBW)

To objectively measure and compare volatility across different stocks (e.g., a $10 stock vs. a $1000 stock), we use a *normalized* version of the Bollinger Band Width.

-   **Standard Bollinger Bands:**
    -   **Middle Band:** 20-period Simple Moving Average (SMA) of the closing price.
    -   **Upper Band:** Middle Band + (2 x 20-period Standard Deviation).
    -   **Lower Band:** Middle Band - (2 x 20-period Standard Deviation).

-   **Normalized BBW Formula:**
    \[ \text{BBW} = \frac{(\text{Upper Band} - \text{Lower Band})}{\text{Middle Band}} \]

By dividing by the Middle Band (the 20-day SMA), we get a dimensionless percentage that represents volatility relative to the stock's current price. This allows for an apples-to-apples comparison across the entire market. A lower BBW value signifies lower relative volatility.

## 4. The Analysis Pipeline: Step-by-Step

The script `analyze_all_stock_volatility.py` executes the following sequence:

### Step 1: Database Connection & Configuration
-   Connects to the `setbull_trader` MySQL database.
-   Loads configuration parameters (BB period, std. dev., lookback periods) from command-line arguments, with sensible defaults provided.

### Step 2: Instrument Selection and Filtering
-   Fetches all unique `instrument_key` and `symbol` pairs from `stock_candle_data` that have daily data.
-   **Crucially, it filters out instruments that are likely ETFs or other non-stock assets.** This is achieved by excluding symbols where the name contains "LIQUID", "ETF", "BEES", or "NIFTY". This ensures the analysis focuses on individual equities.

### Step 3: Per-Instrument Volatility Calculation
-   For each filtered instrument, the script performs the following:
    1.  **Load Daily Data:** Fetches the daily closing prices.
    2.  **Calculate Bollinger Bands:** Computes the 20-period Middle, Upper, and Lower Bands.
    3.  **Calculate Normalized BBW:** Applies the formula described in Section 3.
    4.  **Data Cleaning:** Drops any rows with null or zero BBW values to prevent calculation errors.

### Step 4: Squeeze Detection Logic
-   This is the core of the screener:
    1.  **Define Lookback Period:** A historical window is defined (default: 100 days) to establish a baseline for "normal" volatility for that specific stock.
    2.  **Establish Squeeze Threshold:** It calculates the **10th percentile** of the BBW over this lookback period. This value becomes the threshold for what we define as "low volatility" or a "squeeze."
    3.  **Check Recent Activity:** The script then examines the most recent trading days (default: 5 days) to see if the BBW on any of those days has fallen **at or below** this 10th percentile threshold.

### Step 5: Compiling and Outputting Results
-   If an instrument meets the squeeze criteria (its recent BBW is in the 10th percentile of its lookback range), its data is collected.
-   The final output is a CSV file containing the list of all qualifying stocks, sorted by the `latest_bb_width` in ascending order. This places the "tightest" squeezes at the top of the list.

## 5. Interpreting the Output CSV

The generated CSV file (`low_volatility_stocks.csv` by default) contains the following critical columns:

-   `symbol`: The human-readable stock ticker.
-   `instrument_key`: The unique database identifier for the stock.
-   `latest_date`: The date of the most recent data point analyzed.
-   `latest_close`: The closing price on the `latest_date`.
-   `latest_bb_width`: The normalized BBW for the most recent day. This is the primary value for ranking the "tightness" of the squeeze.
-   `10_percentile_threshold`: The BBW value that a stock needed to be at or below to be included in the list. This provides context for how low the current volatility is relative to its recent history.
-   `avg_bb_width_lookback`: The average BBW over the entire lookback period (e.g., 100 days). Comparing `latest_bb_width` to this average gives a quick sense of the current volatility compression. A `latest_bb_width` significantly lower than this average indicates a strong contraction.

## 6. Conclusion & Next Steps

This analysis pipeline provides a powerful, data-driven tool for identifying potential trading opportunities based on volatility contraction. Stocks appearing at the top of the generated report are prime candidates for further qualitative analysis, chart review, and potential trade entry, as they have been quantitatively identified as being in a state of extreme consolidation. 



Current directory: /Users/gaurav/setbull_projects/setbull_trader/python_strategies/polars/analysis/

---------------------------


Now after filtering based on @analyze_all_stock_volatility.py I got 800 stocks. These are too much for me to analyze manually. 

What do you suggest ? How should I move foraward ?

That is an excellent and very common problem in systematic trading. A screener that is too broad is just as unhelpful as one that is too narrow. You've correctly identified that the initial filter for "low volatility" is just the first step. Now we need to add more layers to identify the highest quality setups from your list of 800 candidates.
My suggestion is to evolve your current script into a more sophisticated ranking system. Instead of just identifying stocks in a squeeze, we should score them based on other factors that suggest a breakout is imminent and potentially powerful.
Here is my proposed approach, following your "DESIGN FIRST" methodology.
High-Level Design (HLD)
The goal is to reduce the list of 800 stocks to a more manageable number (e.g., 20-50) of top-tier candidates. We will achieve this by adding a second layer of analysis that ranks the existing candidates based on factors of Squeeze Quality, Volume Confirmation, and Breakout Readiness.
I propose we enhance your analysis by adding the following three metrics:
Squeeze Tightness Score: This quantifies how squeezed a stock is. Instead of just knowing it's in the 10th percentile, we'll measure if it's in the 9th, 5th, or even 1st percentile. A lower percentile rank indicates a more extreme and statistically significant consolidation, which often precedes a more powerful breakout.
Volume Contraction Ratio: A classic sign of a genuine consolidation before a major move is a "drying up" of volume. We will measure this by comparing recent average volume to a longer-term average. A low ratio indicates that interest has quieted down, setting the stage for a sharp move when volume returns.
Breakout Readiness Score: This metric will gauge if the price is starting to "lean" in a particular direction, suggesting the potential breakout direction. We'll measure where the most recent closing price is relative to the upper and lower Bollinger Bands. A price pushing against the upper band is a bullish hint, while a price hugging the lower band is bearish.
Low-Level Design (LLD)
I propose we implement this by modifying analyze_all_stock_volatility.py to calculate and include these new data points.
Update Database Query: The SQL query inside analyze_instrument_volatility must be updated to also fetch volume from the stock_candle_data table.
Calculate New Metrics in Polars:
Squeeze Tightness Score: Instead of a fixed 10th percentile, we can calculate the actual percentile rank of the latest BBW within the lookback period. A more straightforward approach is to calculate a ratio: squeeze_ratio = latest_bb_width / avg_bb_width_lookback. A smaller ratio indicates a tighter squeeze relative to its own average.
Volume Contraction Ratio: We will calculate two moving averages of volume: a short-term (e.g., 5-day) and a long-term (e.g., 50-day). The ratio will be volume_ratio = 5_day_avg_volume / 50_day_avg_volume. A ratio less than 1 suggests volume is contracting.
Breakout Readiness Score: This can be calculated as (latest_close - lower_band) / (upper_band - lower_band). The result is a value between 0 and 1.
A value > 0.8 suggests the price is pushing against the upper band (bullish pressure).
A value < 0.2 suggests the price is pushing against the lower band (bearish pressure).
A value near 0.5 means the price is in the middle of the bands, indicating indecision.
These three new metrics will be added as columns to the output CSV file. This will allow you to sort and filter your list not just by the existence of a squeeze, but by its quality and potential.
Implementation Plan
If you approve of this design, I propose the following two-phased implementation:
Phase 1: Enhance the Data Collection.
File: python_strategies/polars/analysis/analyze_all_stock_volatility.py
Action: I will modify the script to fetch volume data and calculate the three new metrics (Squeeze Tightness, Volume Contraction, Breakout Readiness), adding them as columns to the output CSV. This will give you a much richer dataset for analysis.
Phase 2: Create a Dedicated Ranking Script.
File: python_strategies/polars/analysis/rank_squeeze_candidates.py (New File)
Action: I will create a new, separate script that reads the CSV generated in Phase 1. This script will allow you to apply specific filters (e.g., "Show me stocks with a Volume Ratio < 0.7 and a Breakout Readiness > 0.8") and output a final, much shorter list of top candidates. This keeps the initial data scan separate from the final filtering, which is a clean design.
Please let me know if you agree with this plan. If so, I will proceed with Phase 1.