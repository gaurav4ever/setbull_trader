
INGESTION FLOW
    1min data Ingestion flow
    1. app.go calls the candle_processing_service.go ProcessIntraDayCandles method which fetches the latest data from broker and pass to convertIntraDayCandles method.
    2. Onces it has the domain.Candle value for the latest candle, it stores in the DB

    MAJOR issue: 
    1. the convertIntraDayCandles method makes the candle OHLC volume and open interset data followed by indicator calculation. 
    2. Regardless of the number of candles, the indicator service tries to calculate the indicator values and it fails. 
    3. here, the logic should be concrete that if we have n candles now, we need to fetch 150-n 1min candles from the DB, update the candles object
    then calculates the indicator values. 


MONITORING FLOW
    1. While ingesting live 1min data for the stocks for group, the code flow is wrong
    - the bb_width_monitoring_service.go method calculateBBWidth is calling technical indicator service CalculateBollingerBandsForRange method with interval as 5min. 
    - the CalculateBollingerBandsForRange is doing candles, err := s.candleRepo.FindByInstrumentAndTimeRange(ctx, instrumentKey, interval, extendedStart, end) directly with 5min interval. 
    - clearly the stock_Candle_data table doesn't have 5min data as it only have daily or 1minute time interval data. 


    2. Current flow
    - On 5min candle close from 9:15 AM, code calls the BB monitoring service with group of stocks with start time as 5min with start as (9:15) and end as 9:20AM, making a complete 5min candle. This is my REQUIRED candle 
    - Now since from the ingestion flow, the current and previous 1min candles for the current day will be calculated already.
    - Now, I need to just aggregate the 1min candles to 5min candles and their indicator values to get the REQUIRED candle bb values and bb width.
    - Ideally there should not be a requirement to calculate the bb indicators and width again. 
    - Once calcuclate the bb width monitor service will call the detectContractingPattern method and flow will resume as it is. 


Details logs are present in file: /Users/gauravsharma/setbull_projects/setbull_trader/internal/service/21st_jul_2025_log.txt

-------------------------------------------------------------------------------------

# COMPREHENSIVE TECHNICAL ANALYSIS AND SOLUTION

## PROBLEM ANALYSIS

### 1. Core Issues Identified

#### Issue 1: Data Ingestion Flow Problem
- **Current Flow**: `candle_processing_service.go` → `convertIntraDayCandles()` → calculates indicators on only the latest candles
- **Problem**: Indicator calculation fails when insufficient historical data is available
- **Root Cause**: The system tries to calculate BB indicators on just the latest 1-2 candles instead of fetching sufficient historical data (150-n candles)

#### Issue 2: Indicator Calculation Timing Issues
- **Current Flow**: Indicators calculated during ingestion on limited data
- **Problem**: BB calculations require 20+ candles for proper calculation, but system processes 1-2 candles at a time
- **Root Cause**: Insufficient historical context for accurate technical indicator calculation

### 2. Log Analysis Findings

From the logs, I can see:
- **BB Width calculations are working** (logs show successful calculations with proper values)
- **Data ingestion is happening** (logs show "Total candles: X for Y")
- **BB monitoring is failing** with error: "not enough data to calculate BBands, need at least 20 candles, got 0"
- **5-minute aggregation is working** (logs show "[5min AGG] Aggregating 5-min candle")

## HIGH-LEVEL DESIGN

### Solution Architecture

 1. ENHANCED INGESTION FLOW 
 1.1 1min data ingestion
 1.2 historical data fetch with (200 1min candles)
 1.3 indicator calculations

 2. MONITORING FLOW
 2.1 5min close event
 2.2 1min to 5min candle aggregation (OHLC + indictators)
 2.2 BB monitoring service 
 2.3 pattern detection 

### Key Design Principles

1. **Data Completeness**: Always ensure sufficient historical data before indicator calculation
2. **Separation of Concerns**: Ingestion, aggregation, and monitoring as distinct phases
3. **Efficiency**: Reuse calculated indicators where possible
4. **Reliability**: Robust error handling and data validation

## LOW-LEVEL DESIGN

### Phase 1: Enhanced Data Ingestion Service

#### 1.1 Enhanced Candle Processing Service
```go
// Enhanced method to ensure sufficient historical data
func (s *CandleProcessingService) ProcessIntraDayCandlesWithHistory(
    ctx context.Context,
    instrumentKey string,
    interval string,
) (int, error) {
    // 1. Fetch latest candles from broker
    response, err := s.authService.GetIntraDayCandleData(ctx, s.userID, instrumentKey, interval)
    if err != nil {
        return 0, fmt.Errorf("failed to fetch intra-day candle data: %w", err)
    }

    // 2. Convert to domain candles
    latestCandles, err := s.convertIntraDayCandles(response, instrumentKey, interval)
    if err != nil {
        return 0, fmt.Errorf("failed to convert intra-day candle data: %w", err)
    }

    // 3. Fetch historical data to ensure sufficient context
    historicalCandles, err := s.ensureSufficientHistoricalData(ctx, instrumentKey, latestCandles)
    if err != nil {
        return 0, fmt.Errorf("failed to ensure sufficient historical data: %w", err)
    }

    // 4. Calculate indicators on complete dataset
    enrichedCandles, err := s.calculateIndicatorsWithHistory(historicalCandles, latestCandles)
    if err != nil {
        return 0, fmt.Errorf("failed to calculate indicators: %w", err)
    }

    // 5. Store only the latest candles (with indicators)
    count, err := s.candleRepo.StoreBatch(ctx, latestCandles)
    if err != nil {
        return 0, fmt.Errorf("failed to store candle data: %w", err)
    }

    return count, nil
}
```

#### 1.2 Historical Data Management
```go
func (s *CandleProcessingService) ensureSufficientHistoricalData(
    ctx context.Context,
    instrumentKey string,
    latestCandles []domain.Candle,
) ([]domain.Candle, error) {
    const minCandlesForBB = 150 // 20 for BB + buffer for other indicators
    
    // Calculate how many historical candles we need
    neededHistorical := minCandlesForBB - len(latestCandles)
    if neededHistorical <= 0 {
        return latestCandles, nil // Already have sufficient data
    }

    // Fetch historical data from DB
    endTime := latestCandles[0].Timestamp
    startTime := endTime.Add(-time.Duration(neededHistorical) * time.Minute)
    
    historicalCandles, err := s.candleRepo.FindByInstrumentAndTimeRange(
        ctx, instrumentKey, "1minute", startTime, endTime,
    )
    if err != nil {
        return nil, fmt.Errorf("failed to fetch historical data: %w", err)
    }

    // Combine historical + latest candles
    combinedCandles := append(historicalCandles, latestCandles...)
    return combinedCandles, nil
}
```

### Phase 2: Enhanced 5-Minute Aggregation Service

#### 2.1 Aggregation with Indicator Calculation
```go
func (s *CandleAggregationService) Aggregate5MinCandlesWithIndicators(
    ctx context.Context,
    startTime, endTime time.Time,
) error {
    // 1. Fetch all 1-minute candles for the time range
    allStocks, err := s.stockGroupService.FetchAllStocksFromAllGroups(ctx, s.stockUniverseService)
    if err != nil {
        return fmt.Errorf("failed to fetch stocks: %w", err)
    }

    for _, stock := range allStocks {
        // 2. Fetch 1-minute candles
        oneMinCandles, err := s.candleRepo.FindByInstrumentAndTimeRange(
            ctx, stock.InstrumentKey, "1minute", startTime, endTime,
        )
        if err != nil {
            log.Error("Failed to fetch 1-min candles for %s: %v", stock.InstrumentKey, err)
            continue
        }

        // 3. Aggregate to 5-minute candles
        fiveMinCandles, err := s.aggregateTo5Min(oneMinCandles)
        if err != nil {
            log.Error("Failed to aggregate 5-min candles for %s: %v", stock.InstrumentKey, err)
            continue
        }

        // 4. Calculate indicators on 5-minute data
        enrichedCandles, err := s.calculateIndicatorsFor5Min(fiveMinCandles)
        if err != nil {
            log.Error("Failed to calculate indicators for %s: %v", stock.InstrumentKey, err)
            continue
        }

        // 5. Process BB width monitoring directly (no storage needed)
        for _, candle := range enrichedCandles {
            if candle.BBWidth > 0 {
                // Trigger BB width monitoring
                s.bbWidthMonitorService.ProcessBBWidth(ctx, stock.InstrumentKey, candle)
            }
        }
    }

    return nil
}
```

### Phase 3: Enhanced BB Width Monitoring Service

#### 3.1 Direct BB Width Processing
```go
func (s *BBWidthMonitorService) ProcessBBWidth(
    ctx context.Context,
    instrumentKey string,
    candle domain.Candle,
) error {
    // 1. Use BB width directly from the aggregated 5-minute candle
    bbWidth := candle.BBWidth
    if bbWidth <= 0 {
        return fmt.Errorf("invalid BB width value: %f", bbWidth)
    }

    // 2. Process pattern detection
    pattern, err := s.detectContractingPattern(ctx, instrumentKey, bbWidth)
    if err != nil {
        return fmt.Errorf("failed to detect pattern: %w", err)
    }

    // 3. Handle pattern alerts
    if pattern != nil {
        s.handlePatternAlert(ctx, instrumentKey, pattern, bbWidth)
    }

    return nil
}

func (s *BBWidthMonitorService) calculateBBWidth(
    ctx context.Context,
    instrumentKey string,
    start, end time.Time,
) (float64, error) {
    // 1. Fetch 1-minute candles for the time range
    candles, err := s.candleRepo.FindByInstrumentAndTimeRange(
        ctx, instrumentKey, "1minute", start, end,
    )
    if err != nil {
        return 0, fmt.Errorf("failed to fetch 1-minute candles: %w", err)
    }

    if len(candles) < 20 {
        return 0, fmt.Errorf("not enough data to calculate BBands, need at least 20 candles, got %d", len(candles))
    }

    // 2. Aggregate to 5-minute candles
    fiveMinCandles, err := s.aggregateTo5Min(candles)
    if err != nil {
        return 0, fmt.Errorf("failed to aggregate to 5-minute candles: %w", err)
    }

    // 3. Calculate BB width on aggregated data
    bbUpper, bbMiddle, bbLower, err := s.technicalIndicatorSvc.CalculateBollingerBandsForRange(
        ctx, instrumentKey, 20, 2.0, "5minute", start, end,
    )
    if err != nil {
        return 0, fmt.Errorf("failed to calculate Bollinger Bands: %w", err)
    }

    // 4. Calculate BB width
    bbWidthValues, err := s.technicalIndicatorSvc.CalculateBBWidthForRange(bbUpper, bbLower, bbMiddle)
    if err != nil {
        return 0, fmt.Errorf("failed to calculate BB width: %w", err)
    }

    if len(bbWidthValues) == 0 {
        return 0, fmt.Errorf("no BB width values calculated")
    }

    return bbWidthValues[len(bbWidthValues)-1].Value, nil
}
```

## IMPLEMENTATION PLAN

### Phase 1: Fix Data Ingestion (1-2 files)
**Goal**: Ensure sufficient historical data for indicator calculation

**Files to modify**:
1. `internal/service/candle_processing_service.go` - Enhanced ingestion with historical data
2. `internal/service/technical_indicator_service.go` - Optimize BB calculation

**Key changes**:
- Add `ensureSufficientHistoricalData()` method
- Modify `ProcessIntraDayCandles()` to use historical context
- Optimize indicator calculation to reuse existing data

### Phase 2: Implement 5-Minute Aggregation with Direct Processing (1-2 files)
**Goal**: Aggregate 1-minute data to 5-minute and process BB width monitoring directly

**Files to modify**:
1. `internal/service/candle_aggregation_service.go` - Enhanced aggregation with direct processing
2. `internal/service/bb_width_monitor_service.go` - Direct BB width processing

**Key changes**:
- Modify aggregation to calculate indicators on 5-minute data
- Process BB width monitoring directly without storing 5-minute candles
- Trigger pattern detection immediately after aggregation

### Phase 3: Fix BB Width Monitoring (1-2 files)
**Goal**: Process BB width monitoring directly from aggregated data

**Files to modify**:
1. `internal/service/bb_width_monitor_service.go` - Direct processing logic
2. `cmd/trading/app/app.go` - Update service wiring

**Key changes**:
- Add `ProcessBBWidth()` method for direct processing
- Modify `calculateBBWidth()` to work with 1-minute data aggregation
- Remove dependency on stored 5-minute data

### Phase 4: Testing and Validation (1-2 files)
**Goal**: Ensure all components work together

**Files to create/modify**:
1. `internal/service/candle_processing_service_test.go` - Enhanced tests
2. `internal/service/bb_width_monitor_service_test.go` - Monitoring tests

**Key changes**:
- Add comprehensive unit tests
- Add integration tests for end-to-end flow
- Validate BB width calculations against known values

## EXPECTED OUTCOMES

### Immediate Benefits
1. **Fixed BB Width Monitoring**: No more "not enough data" errors
2. **Accurate Indicators**: Proper historical context for calculations
3. **Efficient Data Flow**: Reuse of calculated indicators
4. **Reliable Alerts**: BB width monitoring works consistently

### Long-term Benefits
1. **Scalable Architecture**: Clean separation of ingestion, aggregation, and monitoring
2. **Performance Optimization**: Reduced redundant calculations and storage
3. **Data Consistency**: Single source of truth for all indicators
4. **Maintainability**: Clear, modular code structure
5. **Storage Efficiency**: No need to store 5-minute data, only 1-minute data

## SUMMARY

This solution addresses all the identified issues while maintaining the existing architecture and ensuring backward compatibility. The phased approach allows for incremental implementation and testing.

**Key Fixes**:
1. **Ingestion Flow**: Ensure 150 candles before indicator calculation
2. **Aggregation Flow**: Aggregate 1-minute to 5-minute data with indicators (no storage)
3. **Monitoring Flow**: Process BB width monitoring directly from aggregated data
4. **Data Consistency**: Single source of truth for all technical indicators

The solution maintains the existing 5-minute candle close event system while fixing the underlying data availability and calculation issues. No 5-minute data storage required.

-------------------------------------------------------------------------------------

# PHASE 4: TESTING AND VALIDATION

## End-to-End Test Cases for BB Width Monitoring Flow

### Test Case 1: Normal Flow - Contracting Pattern Detected and Alert Triggered
- **Setup:**
  - Ingest 200+ 1-min candles for a stock (simulate real trading hours)
  - Aggregate to 5-min candles in-memory
  - Calculate indicators (BB, BB width, etc.)
  - Provide a sequence of 5-min candles with BB width values: [2.5, 2.0, 1.7, 1.3, 1.1] (decreasing)
  - Set lowest_min_bb_width in CSV to 1.0
- **Action:**
  - Call `ProcessBBWidth` with the latest 5-min candle and the last 5 BB width values
- **Expected:**
  - Pattern detection returns true (contracting)
  - BB width is within ±0.10% of lowest_min_bb_width (1.0)
  - Alert is triggered

### Test Case 2: No Contracting Pattern (Flat or Increasing)
- **Setup:**
  - BB width values: [2.5, 2.6, 2.7, 2.8, 2.9] (increasing)
- **Action:**
  - Call `ProcessBBWidth`
- **Expected:**
  - No alert triggered

### Test Case 3: Contracting Pattern but Outside Optimal Range
- **Setup:**
  - BB width values: [3.0, 2.5, 2.0, 1.8, 1.7] (decreasing)
  - lowest_min_bb_width = 1.0
- **Action:**
  - Call `ProcessBBWidth`
- **Expected:**
  - Contracting pattern detected, but BB width not within optimal range
  - No alert triggered

### Test Case 4: Insufficient Historical Data
- **Setup:**
  - Only 2 BB width values available: [2.0, 1.8]
- **Action:**
  - Call `ProcessBBWidth`
- **Expected:**
  - No pattern detection (insufficient data)
  - No alert triggered

### Test Case 5: Invalid BB Width (Zero or Negative)
- **Setup:**
  - BB width value: 0.0 or -1.0
- **Action:**
  - Call `ProcessBBWidth`
- **Expected:**
  - No alert triggered

### Test Case 6: Error in lowest_min_bb_width Lookup
- **Setup:**
  - CSV file missing or instrument key not found
- **Action:**
  - Call `ProcessBBWidth`
- **Expected:**
  - Error is logged, no alert triggered

### Test Case 7: End-to-End Integration (Full Pipeline)
- **Setup:**
  - Simulate ingestion of 1-min candles for multiple stocks
  - Aggregate to 5-min candles
  - Calculate indicators
  - For each 5-min close, call `ProcessBBWidth` with in-memory history
- **Expected:**
  - Alerts are triggered only for stocks with valid contracting patterns in optimal range
  - No false positives/negatives

---

## Notes for Go Test Implementation
- Use mocks for DB, CSV, and alerting where possible
- For `candle_processing_service_test.go`: Test ingestion and indicator calculation with/without sufficient history
- For `candle_aggregation_service_test.go`: Test correct 5-min aggregation and indicator mapping
- For `bb_width_monitor_service_test.go`: Test `ProcessBBWidth` with various BB width histories and edge cases
- Consider table-driven tests for pattern detection logic
- Validate logs and alert invocations

---



