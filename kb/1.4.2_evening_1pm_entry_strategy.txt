# Implementation Document: Two Thirty Entry Strategy (2_30_ENTRY)

## Overview
The Two Thirty Entry Strategy (2_30_ENTRY) is a time-based entry strategy in the Morning Range backtesting framework that looks for trading opportunities at 2:30 PM based on price movement from the 2:30 PM candle levels. This document provides a comprehensive analysis of the strategy implementation, following the SOP guidelines.

## Strategy Analysis & Design

### 1.1 Strategy Requirements

**Strategy Name**: `2_30_ENTRY` (Two Thirty Entry Strategy)
**Strategy Class**: `TwoThirtyEntryStrategy`

**Core Requirements**:
```python
strategy_requirements = {
    "name": "2_30_ENTRY",
    "entry_conditions": {
        "entry_time": "14:30",  # 2:30 PM
        "buffer_percentage": 0.0003,  # 0.03% buffer
        "entry_price": "2:30 PM high/low with buffer",
        "timing": "Wait for 2:30 PM candle, then look for breakouts"
    },
    "data_requirements": [
        "timestamp", "open", "high", "low", "close"
    ],
    "state_variables": [
        "entry_time", "range_high", "range_low", 
        "range_high_entry_price", "range_low_entry_price",
        "in_long_trade", "in_short_trade"
    ],
    "validation_requirements": [
        "Must be within trading hours (9:15 AM - 3:30 PM)",
        "Wait for 2:30 PM candle to capture range levels",
        "Prevent duplicate entries",
        "Respect instrument direction (BULLISH/BEARISH)"
    ]
}
```

### 1.2 Strategy Logic Flow

```
1. Validate Trading Hours → 2. Wait for 2:30 PM → 3. Capture Range Levels → 4. Check Breakout Conditions → 5. Generate Signal
```

**Detailed Flow**:
1. **Trading Hours Validation**: Ensure candle is within market hours (9:15 AM - 3:30 PM)
2. **Entry Time Check**: Wait for the 2:30 PM candle
3. **Range Level Capture**: At 2:30 PM, capture high and low levels with buffer
4. **Breakout Detection**: 
   - Long: If candle high > 2:30 PM high + buffer (for BULLISH instruments)
   - Short: If candle low < 2:30 PM low - buffer (for BEARISH instruments)
5. **Signal Generation**: Create signal if conditions are met and no duplicate

## Implementation Analysis

### 2.1 Class Structure

**File Location**: `python_strategies/mr_strategy/strategy/entry_strategies/two_thirty_entry.py`

**Class Hierarchy**:
```python
EntryStrategy (Abstract Base Class)
└── TwoThirtyEntryStrategy (Concrete Implementation)
```

**Key Methods**:
- `__init__(config)`: Initialize strategy state and timing
- `check_entry_conditions(candle, mr_values)`: Main entry logic
- `_format_candle_info(candle)`: Format candle info for logging
- `reset_state()`: Reset strategy state

### 2.2 State Management

**State Variables**:
```python
class TwoThirtyEntryStrategy(EntryStrategy):
    def __init__(self, config):
        super().__init__(config)
        # Timing configuration
        self.entry_time = time(14, 30)  # 2:30 PM
        self.min_price_movement = 0.1   # 0.1% minimum movement
        self.market_open = time(9, 15)  # Market open
        self.market_close = time(15, 30) # Market close
        
        # Range tracking
        self.range_high = None           # Captured at 2:30 PM
        self.range_low = None            # Captured at 2:30 PM
        self.range_high_entry_price = None  # High + buffer
        self.range_low_entry_price = None   # Low - buffer
        
        # Trade state
        self.in_long_trade = False       # Track long position
        self.in_short_trade = False      # Track short position
```

**State Reset Logic**:
```python
def reset_state(self) -> None:
    """Reset the entry strategy state."""
    self.in_long_trade = False
    self.in_short_trade = False
    self.range_high = None
    self.range_low = None
    self.range_high_entry_price = None
    self.range_low_entry_price = None
    # Reset base class state
    self.can_generate_long = True
    self.can_generate_short = True
    self.state['can_generate_long'] = True
    self.state['can_generate_short'] = True
```

### 2.3 Core Entry Logic

**Main Entry Method**:
```python
async def check_entry_conditions(self, 
                           candle: Dict[str, Any], 
                           mr_values: Dict[str, Any]) -> Optional[Signal]:
    """
    Check for 2:30 PM entry conditions.
    
    Args:
        candle: The current candle data
        mr_values: Morning range values (not used in this strategy)
        
    Returns:
        Signal if entry conditions are met, None otherwise
    """
```

**Step-by-Step Logic**:

1. **Candle Information Formatting**:
   ```python
   candle_info = self._format_candle_info(candle)
   ```

2. **Timestamp Processing**:
   ```python
   timestamp = candle.get('timestamp')
   if isinstance(timestamp, str):
       timestamp = pd.to_datetime(timestamp)
   ```

3. **Trading Hours Validation**:
   ```python
   candle_time = timestamp.time()
   if not (self.market_open <= candle_time <= self.market_close):
       logger.debug(f"{candle_info}Outside trading hours")
       return None
   ```

4. **Entry Time Check**:
   ```python
   if candle_time < self.entry_time:
       return None  # Wait for 2:30 PM
   ```

5. **Range Level Capture (at 2:30 PM)**:
   ```python
   if candle_time == self.entry_time:
       self.entry_time_str = self.entry_time.strftime('%H:%M')
       logger.debug(f"{candle_info} Got {self.entry_time_str} entry time")
       self.range_high = candle['high']
       self.range_low = candle['low']
       self.range_high_entry_price = self.range_high + (self.range_high * 0.0003)
       self.range_low_entry_price = self.range_low - (self.range_low * 0.0003)
       return None
   ```

6. **Range Validation**:
   ```python
   if self.range_high is None or self.range_low is None:
       logger.debug(f"{candle_info} Range high or low is not set, skipping entry")
       return None
   ```

7. **Long Breakout Check (BULLISH instruments)**:
   ```python
   direction = self.config.instrument_key.get("direction")
   if candle['high'] > self.range_high_entry_price and not self.in_long_trade and not self.in_short_trade and direction == "BULLISH":
       if self.can_generate_signal(SignalType.IMMEDIATE_BREAKOUT.value, "LONG"):
           self.in_long_trade = True
           # Generate signal...
   ```

8. **Short Breakout Check (BEARISH instruments)**:
   ```python
   if candle['low'] < self.range_low_entry_price and not self.in_short_trade and not self.in_long_trade and direction == "BEARISH":
       if self.can_generate_signal(SignalType.IMMEDIATE_BREAKOUT.value, "SHORT"):
           self.in_short_trade = True
           # Generate signal...
   ```

### 2.4 Buffer Calculation Logic

**Buffer Application**:
```python
# At 2:30 PM, calculate entry levels with buffer
self.range_high_entry_price = self.range_high + (self.range_high * 0.0003)  # 0.03% buffer
self.range_low_entry_price = self.range_low - (self.range_low * 0.0003)     # 0.03% buffer
```

**Buffer Logic**:
- **Long Entry**: 2:30 PM High + 0.03% buffer
- **Short Entry**: 2:30 PM Low - 0.03% buffer
- **Buffer Percentage**: 0.03% (smaller than 1ST_ENTRY's 0.07%)

### 2.5 Signal Generation

**Signal Structure**:
```python
signal = Signal(
    type=SignalType.IMMEDIATE_BREAKOUT,
    direction=SignalDirection.LONG,  # or SHORT
    timestamp=timestamp,
    price=self.range_high_entry_price,  # or range_low_entry_price
    range_values={
        'range_high': self.range_high,
        'range_low': self.range_low,
        'range_high_entry_price': self.range_high_entry_price,
        'range_low_entry_price': self.range_low_entry_price
    },
    mr_values={},  # Not used in this strategy
    metadata={
        'entry_type': self.entry_time_str,  # "14:30"
        'entry_time': self.entry_time_str   # "14:30"
    }
)
```

**Signal Properties**:
- **Type**: `IMMEDIATE_BREAKOUT`
- **Direction**: `LONG` or `SHORT` (based on instrument direction)
- **Price**: Buffer-adjusted 2:30 PM level
- **Range Values**: Contains captured range levels and entry prices
- **Metadata**: Contains entry type and time

### 2.6 Candle Information Formatting

**Method**: `_format_candle_info(candle)`

```python
def _format_candle_info(self, candle: Dict[str, Any]) -> str:
    """Format candle information for logging."""
    if not candle:
        return ""
        
    time_str = candle.get('timestamp', 'unknown')
    if isinstance(time_str, pd.Timestamp):
        time_str = time_str.strftime('%Y-%m-%d %H:%M:%S')
        
    open_price = candle.get('open', 0)
    high_price = candle.get('high', 0)
    low_price = candle.get('low', 0)
    close_price = candle.get('close', 0)
    
    return f"[{time_str}] [O:{open_price:.2f} H:{high_price:.2f} L:{low_price:.2f} C:{close_price:.2f}] - "
```

**Format**: `[2024-01-01 14:30:00] [O:100.00 H:101.00 L:99.00 C:100.50] - `

## Integration Points

### 3.1 Factory Integration

**Location**: `python_strategies/mr_strategy/strategy/entry_strategies/factory.py`

```python
@staticmethod
def create_strategy(entry_type: str, config: Any) -> EntryStrategy:
    # Import here to avoid circular imports
    from .first_entry import FirstEntryStrategy
    from .two_thirty_entry import TwoThirtyEntryStrategy
    
    if entry_type == "1ST_ENTRY":
        return FirstEntryStrategy(config)
    elif entry_type == "2_30_ENTRY":
        return TwoThirtyEntryStrategy(config)
    else:
        raise ValueError(f"Unknown entry type: {entry_type}")
```

### 3.2 Signal Type Integration

**Location**: `python_strategies/mr_strategy/strategy/models.py`

```python
class SignalType(Enum):
    IMMEDIATE_BREAKOUT = "immediate_breakout"  # Used by 2_30_ENTRY
    BREAKOUT_CONFIRMATION = "breakout_confirmation"
    RETEST_ENTRY = "retest_entry"
    TWO_THIRTY_ENTRY = "two_thirty_entry"
```

### 3.3 Trade Type Integration

**Location**: `python_strategies/mr_strategy/strategy/trade_manager.py`

```python
class TradeType(Enum):
    IMMEDIATE_BREAKOUT = "IMMEDIATE_BREAKOUT"  # Used by 2_30_ENTRY
    RETEST_ENTRY = "RETEST_ENTRY"
    TWO_THIRTY_ENTRY = "TWO_THIRTY_ENTRY"
```

## Configuration Analysis

### 4.1 Strategy Configuration

**Current Configuration**:
```python
# Default configuration values
entry_time = time(14, 30)        # 2:30 PM
buffer_percentage = 0.0003       # 0.03% buffer
min_price_movement = 0.1         # 0.1% minimum movement
market_open = time(9, 15)        # 9:15 AM
market_close = time(15, 30)      # 3:30 PM
entry_type = "2_30_ENTRY"
signal_type = "IMMEDIATE_BREAKOUT"
```

**Configuration Parameters**:
- **Entry Time**: 2:30 PM (configurable via `config.entry_candle`)
- **Buffer Percentage**: 0.03% (hardcoded in strategy)
- **Trading Hours**: 9:15 AM - 3:30 PM
- **Instrument Direction**: Respects BULLISH/BEARISH setting

### 4.2 Data Requirements

**Required Candle Data**:
```python
required_candle_fields = [
    'timestamp',  # Candle timestamp
    'open',       # Opening price
    'high',       # High price
    'low',        # Low price
    'close'       # Closing price
]
```

**Required Configuration Data**:
```python
required_config_fields = [
    'entry_candle',        # "14:30" format
    'instrument_key'       # Contains 'direction' field
]
```

## Testing Analysis

### 5.1 Unit Tests

**Location**: `python_strategies/mr_strategy/tests/test_entry_strategies.py`

**Test Coverage**:
```python
def test_two_thirty_entry_strategy(config):
    """Test two thirty entry strategy creation."""
    two_thirty_entry = EntryStrategyFactory.create_strategy("2_30_ENTRY", config)
    assert isinstance(two_thirty_entry, TwoThirtyEntryStrategy)

@pytest.mark.asyncio
async def test_two_thirty_entry_conditions(config):
    """Test two thirty entry conditions."""
    two_thirty_entry = TwoThirtyEntryStrategy(config)
    
    # Test data - 2:30 PM candle
    candle_230 = {
        'timestamp': pd.Timestamp('2024-01-01 14:30:00'),
        'open': 100.0, 'high': 101.0, 'low': 99.0, 'close': 100.5
    }
    
    # Test data - after 2:30 PM
    candle_after = {
        'timestamp': pd.Timestamp('2024-01-01 14:35:00'),
        'open': 100.5, 'high': 102.0, 'low': 100.0, 'close': 101.5
    }
    
    mr_values = {}  # Not used in this strategy
    
    # Test 2:30 PM candle (should capture range levels)
    signal1 = await two_thirty_entry.check_entry_conditions(candle_230, mr_values)
    assert signal1 is None  # Should not generate signal at 2:30 PM
    
    # Test after 2:30 PM (should check for breakouts)
    signal2 = await two_thirty_entry.check_entry_conditions(candle_after, mr_values)
    # Add assertions based on expected behavior
```

### 5.2 Integration Tests

**Location**: `python_strategies/mr_strategy/tests/test_backtest_engine.py`

```python
@pytest.mark.asyncio
async def test_two_thirty_entry_backtest(config, sample_data):
    """Test backtest with two thirty entry strategy."""
    config['entry_type'] = '2_30_ENTRY'
    engine = BacktestEngine(config)
    
    # Add 2:30 PM candle to data
    two_thirty_data = sample_data.copy()
    two_thirty_data['RELIANCE'] = pd.concat([
        two_thirty_data['RELIANCE'],
        pd.DataFrame([{
            'timestamp': pd.Timestamp('2024-01-15 14:30:00'),
            'open': 101.0, 'high': 102.0, 'low': 100.5, 'close': 101.5
        }])
    ]).reset_index(drop=True)
    
    results = await engine.run_backtest(two_thirty_data)
    
    # Verify results
    assert results['status'] == 'success'
    assert len(results['signals']) > 0
    
    # Check signal properties
    signal = results['signals'][0]
    assert signal.type == SignalType.IMMEDIATE_BREAKOUT
```

## Performance Analysis

### 6.1 Strategy Performance Metrics

**Key Metrics**:
- **Entry Efficiency**: How often 2:30 PM breakouts lead to profitable trades
- **False Signals**: Number of breakouts that don't result in profitable moves
- **Entry Timing**: Distribution of entry times after 2:30 PM
- **Buffer Effectiveness**: Impact of 0.03% buffer on signal quality
- **Range Capture Accuracy**: How well 2:30 PM levels represent trading range

### 6.2 Performance Considerations

**Optimizations**:
1. **Time-based Filtering**: Early exit for candles before 2:30 PM
2. **Range Caching**: Store range levels after 2:30 PM capture
3. **Direction Filtering**: Only check relevant direction based on instrument
4. **State Management**: Efficient state tracking to prevent duplicates

**Memory Usage**:
- **State Variables**: Moderate memory footprint (8 variables)
- **Range Storage**: Temporary storage of 2:30 PM levels
- **Signal Objects**: Lightweight signal creation

## Error Handling

### 7.1 Input Validation

**Trading Hours Validation**:
```python
if not (self.market_open <= candle_time <= self.market_close):
    logger.debug(f"{candle_info}Outside trading hours")
    return None
```

**Range Level Validation**:
```python
if self.range_high is None or self.range_low is None:
    logger.debug(f"{candle_info} Range high or low is not set, skipping entry")
    return None
```

**Instrument Direction Validation**:
```python
direction = self.config.instrument_key.get("direction")
if direction == "BULLISH":
    # Only check for long entries
elif direction == "BEARISH":
    # Only check for short entries
```

### 7.2 State Validation

**Duplicate Entry Prevention**:
```python
if not self.in_long_trade and not self.in_short_trade:
    # Only check for new entries if not already in a trade
```

**Signal Generation Validation**:
```python
if self.can_generate_signal(SignalType.IMMEDIATE_BREAKOUT.value, "LONG"):
    # Only generate signal if allowed
```

## Logging and Debugging

### 8.1 Logging Strategy

**Debug Logs**:
```python
logger.debug(f"{candle_info}Outside trading hours")
logger.debug(f"{candle_info} Got {self.entry_time_str} entry time")
logger.debug(f"{candle_info} Range high or low is not set, skipping entry")
logger.debug(f"{candle_info}Checking entry conditions - Price: {candle['close']}, Range High: {self.range_high}, Range Low: {self.range_low}")
logger.debug(f"{candle_info}No entry conditions met")
```

**Info Logs**:
```python
logger.info(f"{candle_info} {self.entry_time_str} long entry detected - Movement")
logger.info(f"{candle_info} {self.entry_time_str} short entry detected")
```

### 8.2 Debugging Tips

**Enable Debug Logging**:
```python
import logging
logging.getLogger('mr_strategy').setLevel(logging.DEBUG)
```

**Check Strategy State**:
```python
print(f"Strategy state: {two_thirty_entry.state}")
print(f"Entry time: {two_thirty_entry.entry_time}")
print(f"Range high: {two_thirty_entry.range_high}")
print(f"Range low: {two_thirty_entry.range_low}")
print(f"In long trade: {two_thirty_entry.in_long_trade}")
print(f"In short trade: {two_thirty_entry.in_short_trade}")
```

**Validate Range Capture**:
```python
# Check if 2:30 PM levels are captured correctly
if two_thirty_entry.range_high is not None:
    print(f"2:30 PM High: {two_thirty_entry.range_high}")
    print(f"Entry Price (High): {two_thirty_entry.range_high_entry_price}")
    print(f"Buffer Applied: {(two_thirty_entry.range_high_entry_price - two_thirty_entry.range_high) / two_thirty_entry.range_high * 100:.3f}%")
```

## Best Practices Implementation

### 9.1 Code Quality

**Single Responsibility**: ✅
- Strategy focuses only on 2:30 PM time-based entry
- Clear separation of concerns

**State Management**: ✅
- Proper state tracking for range levels and trade positions
- State reset functionality

**Error Handling**: ✅
- Trading hours validation
- Range level validation
- Instrument direction validation

### 9.2 Performance Optimization

**Efficient Timing**: ✅
- Early exit for candles before 2:30 PM
- Time-based filtering reduces unnecessary processing

**Memory Management**: ✅
- Moderate state variables
- Efficient range level storage

### 9.3 Testing Coverage

**Unit Tests**: ✅
- Strategy creation tests
- Entry condition tests
- State management tests
- Timing validation tests

**Integration Tests**: ✅
- Backtest engine integration
- Signal generation validation
- 2:30 PM candle handling

## Comparison with Other Strategies

### 10.1 vs 1ST_ENTRY Strategy

| Aspect | 2_30_ENTRY | 1ST_ENTRY |
|--------|------------|-----------|
| **Timing** | Time-based (2:30 PM) | Immediate (skip 9:15 AM) |
| **Buffer** | 0.03% from 2:30 PM levels | 0.07% from MR levels |
| **Entry Logic** | Range-based breakout | MR breakout |
| **State Management** | Complex range tracking | Simple trade tracking |
| **Data Dependencies** | Independent of MR | Requires valid MR |

### 10.2 vs BB_WIDTH_ENTRY Strategy

| Aspect | 2_30_ENTRY | BB_WIDTH_ENTRY |
|--------|------------|----------------|
| **Data Requirements** | Basic OHLCV | BB indicators + OHLCV |
| **Entry Condition** | Time-based breakout | BB width squeeze |
| **Complexity** | Moderate | Complex |
| **Performance** | Fast | Moderate |
| **Timing Dependency** | High (2:30 PM) | Low (anytime) |

## Future Enhancements

### 11.1 Potential Improvements

1. **Dynamic Buffer**: Make buffer percentage configurable
2. **Multiple Entry Times**: Support for different entry times (1 PM, 3 PM, etc.)
3. **Volume Confirmation**: Add volume-based validation
4. **Range Validation**: Add minimum range size requirements
5. **Trend Filter**: Add trend direction filter

### 11.2 Configuration Extensions

```python
@dataclass
class TwoThirtyEntryConfig:
    entry_time: time = time(14, 30)      # 2:30 PM
    buffer_percentage: float = 0.0003    # 0.03% buffer
    min_range_size: float = 0.5          # Minimum range size
    volume_threshold: float = 1.5        # Volume multiplier
    trend_filter: bool = False           # Enable trend filter
    multiple_entry_times: List[time] = None  # Support multiple times
```

### 11.3 Advanced Features

**Multiple Entry Times**:
```python
# Support for multiple entry times
entry_times = [time(13, 0), time(14, 30), time(15, 0)]  # 1 PM, 2:30 PM, 3 PM
```

**Range Validation**:
```python
# Validate range size at 2:30 PM
range_size = self.range_high - self.range_low
if range_size < self.config.min_range_size:
    logger.debug("Range size too small, skipping entry")
    return None
```

## Conclusion

The Two Thirty Entry Strategy (2_30_ENTRY) is a sophisticated time-based strategy that provides an alternative to immediate morning range breakouts. It offers unique advantages for traders who prefer to wait for market development before entering positions.

**Key Strengths**:
- Time-based entry reduces false signals
- Independent of morning range validation
- Respects instrument direction
- Clear entry logic with proper state management
- Good error handling and logging

**Areas for Enhancement**:
- Configurable buffer percentage
- Multiple entry time support
- Additional validation filters
- Performance metrics tracking

**Unique Characteristics**:
- **Time Dependency**: Requires specific 2:30 PM timing
- **Range Capture**: Captures trading range at specific time
- **Direction Filtering**: Respects instrument direction
- **Buffer Strategy**: Uses smaller buffer than 1ST_ENTRY

This implementation demonstrates advanced time-based trading logic and serves as an excellent reference for developing other time-dependent strategies within the framework.
