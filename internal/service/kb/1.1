Direct Answer:
You want to make your GetQuotes method in market_quote_service.go robust to any type of stock key (symbol, instrument key, etc.) by integrating with StockUniverseService so you can resolve/normalize whatever the user provides into the correct instrument_key for the Upstox API. This will allow your quote service to handle requests with symbols, instrument keys, or other identifiers seamlessly.
Restated Query:
You are receiving various types of keys (sometimes symbol, sometimes instrument key, etc.) in your GetQuotes method. The Upstox API expects instrument_key. You want to integrate with StockUniverseService so that, regardless of what the user provides, you can resolve it to the correct instrument_key before calling the Upstox API. This will make your quote service more flexible and robust.
Design-First Approach:
High-Level Design
Goal:
Make MarketQuoteService.GetQuotes accept any stock identifier (symbol, instrument key, etc.), resolve them to instrument_key using StockUniverseService, and then fetch quotes from Upstox.
Key Steps:
Accept a list of keys (could be symbols, instrument keys, etc.).
Use StockUniverseService to resolve all keys to their corresponding instrument_key.
Call Upstox API with the resolved instrument_key list.
Map the response back to the original keys for the client.
Low-Level Design
API Change:
Update GetQuotes to accept a new parameter: keyType (e.g., "symbol", "instrument_key", etc.).
If keyType is not instrument_key, use StockUniverseService to resolve each key to its instrument_key.
If a key cannot be resolved, add an error for that key in the response.
Integration:
Use StockUniverseService.GetStockBySymbol or GetStocksByInstrumentKeys as needed.
Build a mapping from input key → instrument_key → Upstox response.
Error Handling:
If a key cannot be resolved, return a user-friendly error for that key.
If Upstox returns no data for a resolved key, return an appropriate error.
Testing:
Unit tests for key resolution logic.
Integration tests for the full flow.
Phase Plan (1-2 files per phase):
Phase 1: Add Key Resolution Logic
Update MarketQuoteService.GetQuotes to accept a keyType parameter.
Integrate with StockUniverseService to resolve keys to instrument_key.
Update the mapping logic to handle errors for unresolved keys.
Files:
internal/service/market_quote_service.go
(Possibly) internal/service/stock_universe_service.go (if helper methods are needed)
Phase 2: Update API Layer (if needed)
Update REST/gRPC endpoints to accept keyType and pass it to the service.
Update API documentation.
Files:
cmd/trading/transport/rest/ (or wherever the endpoint is defined)
Phase 3: Testing
Add/Update unit and integration tests for the new logic.
Files:
Test files for market_quote_service.go and API layer.
