/Users/gaurav/setbull_projects/setbull_trader/
├── .DS_Store
├── .cursor/
│   └── rules/
│       └── setbull-trader-software-rules.mdc
├── .vscode/
│   ├── launch.json
│   ├── settings.json
│   └── tasks.json
├── Dockerfile
├── GOALS/
│   └── 1_next_2_weeks.txt
├── Makefile
├── README.md
├── application.dev.yaml
├── application.yaml
├── cmd/
│   └── trading/
│       ├── app/
│       │   └── app.go
│       └── transport/
│           ├── http.go
│           ├── middleware.go
│           └── rest/
│               ├── candle_handlers.go
│               ├── execution_plan_handlers.go
│               ├── order_execution_handlers.go
│               ├── responses.go
│               ├── server.go
│               ├── stock_handlers.go
│               ├── trade_parameters_handlers.go
│               ├── upstox_auth_handlers.go
│               └── utility_handlers.go
├── consolidated_code/
│   ├── config.txt
│   ├── main.txt
│   ├── models.txt
│   ├── services.txt
│   ├── transport.txt
│   └── utils.txt
├── consolidated_code.sh
├── copy-stocks-file.sh
├── current_directory_structure.txt
├── dhan/
│   ├── all_in_one.txt
│   ├── get_history_orders.txt
│   ├── get_orders_intraday.txt
│   ├── post_order_api_doc.txt
│   └── put_order_api_doc.txt
├── directory_tree.py
├── frontend/
│   ├── .DS_Store
│   ├── .npmrc
│   ├── .prettierignore
│   ├── .prettierrc
│   ├── README.md
│   ├── e2e/
│   │   └── demo.test.ts
│   ├── eslint.config.js
│   ├── package-lock.json
│   ├── package.json
│   ├── playwright.config.ts
│   ├── postcss.config.js
│   ├── src/
│   │   ├── .DS_Store
│   │   ├── app.css
│   │   ├── app.d.ts
│   │   ├── app.html
│   │   ├── demo.spec.ts
│   │   ├── lib/
│   │   │   ├── .DS_Store
│   │   │   ├── actions/
│   │   │   │   └── clickOutside.js
│   │   │   ├── components/
│   │   │   │   ├── Autocomplete.svelte
│   │   │   │   ├── EnhancedStockSelector.svelte
│   │   │   │   ├── ExecutionControl.svelte
│   │   │   │   ├── ExecutionLevelDisplay.svelte
│   │   │   │   ├── ExecutionResults.svelte
│   │   │   │   ├── Modal.svelte
│   │   │   │   ├── StockCard.svelte
│   │   │   │   ├── StockParameterForm.svelte
│   │   │   │   ├── StockSelector.svelte
│   │   │   │   ├── TradingParameters.svelte
│   │   │   │   └── ui/
│   │   │   │       └── NumericInput.svelte
│   │   │   ├── config/
│   │   │   │   └── api.js
│   │   │   ├── index.ts
│   │   │   ├── services/
│   │   │   │   ├── apiService.js
│   │   │   │   ├── calculationService.js
│   │   │   │   ├── executionService.js
│   │   │   │   └── stocksService.js
│   │   │   ├── stores/
│   │   │   │   ├── executionStatus.js
│   │   │   │   └── selectedStocks.js
│   │   │   └── utils/
│   │   │       ├── formatting.js
│   │   │       ├── stockFormatting.js
│   │   │       └── validation.js
│   │   └── routes/
│   │       ├── +layout.svelte
│   │       ├── +page.svelte
│   │       ├── order/
│   │       │   ├── +page.svelte
│   │       │   ├── cancel/
│   │       │   │   └── +page.svelte
│   │       │   └── modify/
│   │       │       └── +page.svelte
│   │       ├── page.svelte.test.ts
│   │       └── trades/
│   │           ├── +page.svelte
│   │           └── history/
│   │               └── +page.svelte
│   ├── static/
│   │   ├── favicon.png
│   │   └── nse_stocks.txt
│   ├── svelte.config.js
│   ├── tailwind.config.js
│   ├── tsconfig.json
│   ├── vite.config.ts
│   └── vitest-setup-client.ts
├── go.mod
├── go.sum
├── internal/
│   ├── core/
│   │   ├── adapters/
│   │   │   └── client/
│   │   │       ├── dhan/
│   │   │       │   ├── dhan_client.go
│   │   │       │   └── models.go
│   │   │       └── upstox/
│   │   │           ├── auth_service.go
│   │   │           ├── config.go
│   │   │           ├── kb/
│   │   │           │   └── 1.authentication.txt
│   │   │           └── token_repository.go
│   │   ├── constant/
│   │   ├── dto/
│   │   │   ├── request/
│   │   │   │   └── orders.go
│   │   │   └── response/
│   │   │       └── orders.go
│   │   └── service/
│   │       └── orders/
│   │           └── service.go
│   ├── domain/
│   │   ├── candle.go
│   │   ├── models.go
│   │   └── utility.go
│   ├── repository/
│   │   ├── interfaces.go
│   │   └── postgres/
│   │       ├── candle_repository.go
│   │       ├── execution_plan_repository.go
│   │       ├── level_entry_repository.go
│   │       ├── order_execution_repository.go
│   │       ├── stock_repository.go
│   │       └── trade_parameters_repository.go
│   ├── service/
│   │   ├── batch_fetch_service.go
│   │   ├── candle_aggregation_service.go
│   │   ├── candle_processing_service.go
│   │   ├── execution_plan_service.go
│   │   ├── fibonacci_calculator.go
│   │   ├── order_execution_service.go
│   │   ├── stock_service.go
│   │   ├── trade_parameters_service.go
│   │   └── utility_service.go
│   └── trading/
│       ├── config/
│       │   └── config.go
│       └── service/
│           └── query/
├── main.go
├── nse_stocks.txt
├── nse_upstox.json
├── pkg/
│   ├── apperrors/
│   │   └── errors.go
│   ├── cache/
│   │   ├── cache.go
│   │   ├── gocache.go
│   │   └── redis.go
│   ├── database/
│   │   ├── database.go
│   │   ├── migration.go
│   │   ├── migrations/
│   │   │   ├── 20250315163258_create_table_template.down.sql
│   │   │   ├── 20250315163258_create_table_template.up.sql
│   │   │   ├── 20250316035135_add_active_and_timestamps.down.sql
│   │   │   ├── 20250316035135_add_active_and_timestamps.up.sql
│   │   │   ├── 20250317154127_add_security_id_to_stocks.down.sql
│   │   │   ├── 20250317154127_add_security_id_to_stocks.up.sql
│   │   │   ├── 20250331091305_create_candle_data_table.down.sql
│   │   │   └── 20250331091305_create_candle_data_table.up.sql
│   │   └── queries/
│   │       ├── stock_candle_data_1day_aggregation.sql
│   │       └── stock_candle_data_5min_aggregation.sql
│   ├── log/
│   │   └── log.go
│   └── util/
│       └── stockparser/
│           └── nse_parser.go
├── training/
│   ├── 1_execution_requirement.txt
│   ├── 2_thoughts-timeline-1.txt
│   ├── 3_design.txt
│   ├── 4_required_apis.txt
│   └── 5_new_stock_file_format_knowledge.txt
└── upstox/
    └── go_api_client/
        ├── .swagger-codegen/
        │   └── VERSION
        ├── .swagger-codegen-ignore
        ├── .travis.yml
        ├── README.md
        ├── api/
        │   └── swagger.yaml
        ├── api_charge.go
        ├── api_history.go
        ├── api_login.go
        ├── api_market_holidays_and_timings.go
        ├── api_market_quote.go
        ├── api_options.go
        ├── api_order.go
        ├── api_order_controller_v3.go
        ├── api_portfolio.go
        ├── api_post_trade.go
        ├── api_trade_profit_and_loss.go
        ├── api_user.go
        ├── api_websocket.go
        ├── client.go
        ├── configuration.go
        ├── docs/
        │   ├── AnalyticsData.md
        │   ├── ApiGatewayErrorResponse.md
        │   ├── BatchExecutionSummary.md
        │   ├── BrokerageData.md
        │   ├── BrokerageTaxes.md
        │   ├── BrokerageWrapperData.md
        │   ├── CancelOrExitMultiOrderData.md
        │   ├── CancelOrExitMultiOrderResponse.md
        │   ├── CancelOrExitOrderErrorData.md
        │   ├── CancelOrderData.md
        │   ├── CancelOrderResponse.md
        │   ├── CancelOrderV3Response.md
        │   ├── ChargeApi.md
        │   ├── ConvertPositionData.md
        │   ├── ConvertPositionRequest.md
        │   ├── ConvertPositionResponse.md
        │   ├── Depth.md
        │   ├── DepthMap.md
        │   ├── DpPlan.md
        │   ├── ExchangeTimingData.md
        │   ├── GetBrokerageResponse.md
        │   ├── GetExchangeTimingResponse.md
        │   ├── GetFullMarketQuoteResponse.md
        │   ├── GetGttOrderResponse.md
        │   ├── GetHistoricalCandleResponse.md
        │   ├── GetHoldingsResponse.md
        │   ├── GetHolidayResponse.md
        │   ├── GetIntraDayCandleResponse.md
        │   ├── GetMarketQuoteLastTradedPriceResponse.md
        │   ├── GetMarketQuoteOhlcResponse.md
        │   ├── GetMarketStatusResponse.md
        │   ├── GetOptionChainResponse.md
        │   ├── GetOptionContractResponse.md
        │   ├── GetOrderBookResponse.md
        │   ├── GetOrderDetailsResponse.md
        │   ├── GetOrderResponse.md
        │   ├── GetPositionResponse.md
        │   ├── GetProfileResponse.md
        │   ├── GetProfitAndLossChargesResponse.md
        │   ├── GetTradeResponse.md
        │   ├── GetTradeWiseProfitAndLossDataResponse.md
        │   ├── GetTradeWiseProfitAndLossMetaDataResponse.md
        │   ├── GetUserFundMarginResponse.md
        │   ├── GttCancelOrderRequest.md
        │   ├── GttModifyOrderRequest.md
        │   ├── GttOrderData.md
        │   ├── GttOrderDetails.md
        │   ├── GttPlaceOrderRequest.md
        │   ├── GttRule.md
        │   ├── GttTriggerOrderResponse.md
        │   ├── HistoricalCandleData.md
        │   ├── HistoryApi.md
        │   ├── HoldingsData.md
        │   ├── HolidayData.md
        │   ├── IndieUserTokenRequest.md
        │   ├── Instrument.md
        │   ├── InstrumentData.md
        │   ├── IntraDayCandleData.md
        │   ├── LoginApi.md
        │   ├── LogoutResponse.md
        │   ├── Margin.md
        │   ├── MarginData.md
        │   ├── MarginRequest.md
        │   ├── MarketData.md
        │   ├── MarketHolidaysAndTimingsApi.md
        │   ├── MarketQuoteApi.md
        │   ├── MarketQuoteOhlc.md
        │   ├── MarketQuoteSymbol.md
        │   ├── MarketQuoteSymbolLtp.md
        │   ├── MarketStatusData.md
        │   ├── ModifyOrderData.md
        │   ├── ModifyOrderRequest.md
        │   ├── ModifyOrderResponse.md
        │   ├── ModifyOrderV3Response.md
        │   ├── MultiOrderData.md
        │   ├── MultiOrderError.md
        │   ├── MultiOrderRequest.md
        │   ├── MultiOrderResponse.md
        │   ├── MultiOrderSummary.md
        │   ├── MultiOrderV3Data.md
        │   ├── OAuthClientException.md
        │   ├── OAuthClientExceptionCause.md
        │   ├── OAuthClientExceptionCauseStackTrace.md
        │   ├── OAuthClientExceptionCauseSuppressed.md
        │   ├── Ohlc.md
        │   ├── OptionStrikeData.md
        │   ├── OptionsApi.md
        │   ├── OrderApi.md
        │   ├── OrderBookData.md
        │   ├── OrderControllerV3Api.md
        │   ├── OrderData.md
        │   ├── OrderMetadata.md
        │   ├── OtherTaxes.md
        │   ├── PlaceOrderData.md
        │   ├── PlaceOrderRequest.md
        │   ├── PlaceOrderResponse.md
        │   ├── PlaceOrderV3Request.md
        │   ├── PlaceOrderV3Response.md
        │   ├── PortfolioApi.md
        │   ├── PositionData.md
        │   ├── PostMarginResponse.md
        │   ├── PostTradeApi.md
        │   ├── Problem.md
        │   ├── ProfileData.md
        │   ├── ProfitAndLossChargesData.md
        │   ├── ProfitAndLossChargesTaxes.md
        │   ├── ProfitAndLossChargesWrapperData.md
        │   ├── ProfitAndLossMetaData.md
        │   ├── ProfitAndLossMetaDataWrapper.md
        │   ├── ProfitAndLossOtherChargesTaxes.md
        │   ├── PutCallOptionChainData.md
        │   ├── Rule.md
        │   ├── TokenRequest.md
        │   ├── TokenResponse.md
        │   ├── TradeData.md
        │   ├── TradeHistoryResponse.md
        │   ├── TradeHistoryResponseMetaData.md
        │   ├── TradeHistoryResponsePageData.md
        │   ├── TradeHistoryResponseTradeData.md
        │   ├── TradeProfitAndLossApi.md
        │   ├── TradeWiseMetaData.md
        │   ├── TradeWiseProfitAndLossData.md
        │   ├── UserApi.md
        │   ├── UserFundMarginData.md
        │   ├── WebsocketApi.md
        │   ├── WebsocketAuthRedirectResponse.md
        │   └── WebsocketAuthRedirectResponseData.md
        ├── git_push.sh
        ├── model_analytics_data.go
        ├── model_api_gateway_error_response.go
        ├── model_batch_execution_summary.go
        ├── model_brokerage_data.go
        ├── model_brokerage_taxes.go
        ├── model_brokerage_wrapper_data.go
        ├── model_cancel_or_exit_multi_order_data.go
        ├── model_cancel_or_exit_multi_order_response.go
        ├── model_cancel_or_exit_order_error_data.go
        ├── model_cancel_order_data.go
        ├── model_cancel_order_response.go
        ├── model_cancel_order_v3_response.go
        ├── model_convert_position_data.go
        ├── model_convert_position_request.go
        ├── model_convert_position_response.go
        ├── model_depth.go
        ├── model_depth_map.go
        ├── model_dp_plan.go
        ├── model_exchange_timing_data.go
        ├── model_get_brokerage_response.go
        ├── model_get_exchange_timing_response.go
        ├── model_get_full_market_quote_response.go
        ├── model_get_gtt_order_response.go
        ├── model_get_historical_candle_response.go
        ├── model_get_holdings_response.go
        ├── model_get_holiday_response.go
        ├── model_get_intra_day_candle_response.go
        ├── model_get_market_quote_last_traded_price_response.go
        ├── model_get_market_quote_ohlc_response.go
        ├── model_get_market_status_response.go
        ├── model_get_option_chain_response.go
        ├── model_get_option_contract_response.go
        ├── model_get_order_book_response.go
        ├── model_get_order_details_response.go
        ├── model_get_order_response.go
        ├── model_get_position_response.go
        ├── model_get_profile_response.go
        ├── model_get_profit_and_loss_charges_response.go
        ├── model_get_trade_response.go
        ├── model_get_trade_wise_profit_and_loss_data_response.go
        ├── model_get_trade_wise_profit_and_loss_meta_data_response.go
        ├── model_get_user_fund_margin_response.go
        ├── model_gtt_cancel_order_request.go
        ├── model_gtt_modify_order_request.go
        ├── model_gtt_order_data.go
        ├── model_gtt_order_details.go
        ├── model_gtt_place_order_request.go
        ├── model_gtt_rule.go
        ├── model_gtt_trigger_order_response.go
        ├── model_historical_candle_data.go
        ├── model_holdings_data.go
        ├── model_holiday_data.go
        ├── model_indie_user_token_request.go
        ├── model_instrument.go
        ├── model_instrument_data.go
        ├── model_intra_day_candle_data.go
        ├── model_logout_response.go
        ├── model_margin.go
        ├── model_margin_data.go
        ├── model_margin_request.go
        ├── model_market_data.go
        ├── model_market_quote_ohlc.go
        ├── model_market_quote_symbol.go
        ├── model_market_quote_symbol_ltp.go
        ├── model_market_status_data.go
        ├── model_modify_order_data.go
        ├── model_modify_order_request.go
        ├── model_modify_order_response.go
        ├── model_modify_order_v3_response.go
        ├── model_multi_order_data.go
        ├── model_multi_order_error.go
        ├── model_multi_order_request.go
        ├── model_multi_order_response.go
        ├── model_multi_order_summary.go
        ├── model_multi_order_v3_data.go
        ├── model_o_auth_client_exception.go
        ├── model_o_auth_client_exception_cause.go
        ├── model_o_auth_client_exception_cause_stack_trace.go
        ├── model_o_auth_client_exception_cause_suppressed.go
        ├── model_ohlc.go
        ├── model_option_strike_data.go
        ├── model_order_book_data.go
        ├── model_order_data.go
        ├── model_order_metadata.go
        ├── model_other_taxes.go
        ├── model_place_order_data.go
        ├── model_place_order_request.go
        ├── model_place_order_response.go
        ├── model_place_order_v3_request.go
        ├── model_place_order_v3_response.go
        ├── model_position_data.go
        ├── model_post_margin_response.go
        ├── model_problem.go
        ├── model_profile_data.go
        ├── model_profit_and_loss_charges_data.go
        ├── model_profit_and_loss_charges_taxes.go
        ├── model_profit_and_loss_charges_wrapper_data.go
        ├── model_profit_and_loss_meta_data.go
        ├── model_profit_and_loss_meta_data_wrapper.go
        ├── model_profit_and_loss_other_charges_taxes.go
        ├── model_put_call_option_chain_data.go
        ├── model_rule.go
        ├── model_token_request.go
        ├── model_token_response.go
        ├── model_trade_data.go
        ├── model_trade_history_response.go
        ├── model_trade_history_response_meta_data.go
        ├── model_trade_history_response_page_data.go
        ├── model_trade_history_response_trade_data.go
        ├── model_trade_wise_meta_data.go
        ├── model_trade_wise_profit_and_loss_data.go
        ├── model_user_fund_margin_data.go
        ├── model_websocket_auth_redirect_response.go
        ├── model_websocket_auth_redirect_response_data.go
        └── response.go



Project Overview
Setbull Trader appears to be a trading platform that integrates with multiple brokerages (primarily Dhan and Upstox) and provides tools for algorithmic trading, candle data analysis, and trade execution.
Main Directory Structure
Root-level Configuration and Documentation

application.yaml and application.dev.yaml: Configuration files for different environments
Dockerfile and Makefile: Build and deployment automation
README.md and GOALS/: Project documentation and roadmap

Core Application Structure

cmd/: Entry points and HTTP server implementation
internal/: Core business logic, separated into logical domains
pkg/: Reusable packages that could be externalized
upstox/ and dhan/: API client libraries for these brokerages

Frontend

frontend/: A Svelte-based frontend application

Key Components Explained
cmd/trading/
This is where the application's entry points and HTTP server implementation live:

app/: Application initialization
transport/: HTTP transport layer and REST API handlers

internal/
Contains the core business logic:

core/: Core abstractions including:

adapters/client/: External API clients (Dhan, Upstox)
dto/: Data Transfer Objects for request/response
service/orders/: Order execution service


domain/: Domain models, including:

models.go: Core entity definitions (Stock, ExecutionPlan, etc.)
candle.go: Candle data models for technical analysis


repository/: Data access layer

interfaces.go: Repository interfaces
postgres/: PostgreSQL implementations


service/: Business logic services

Trading services (execution, fibonacci calculations)
Candle data processing and aggregation
Stock management


trading/: Trading-specific configurations and services

pkg/
Reusable packages:

apperrors/: Error handling
cache/: Caching implementations (Redis, in-memory)
database/: Database connections and migrations
log/: Logging utilities
util/: Various utilities, including stock parsing

Key Features

Stock Management: Selecting stocks, managing parameters
Trade Execution: Creating execution plans with Fibonacci levels
Candle Data: Historical data retrieval and analysis
Brokerage Integration: Connections to Dhan and Upstox APIs

Database Schema
The application uses a PostgreSQL database with tables for:

Stocks
Trade parameters
Execution plans
Order executions
Candle data

Development Flow
As a new contributor, you might focus on:

Understanding the domain models in internal/domain/
Examining the service implementations in internal/service/
Learning how the API clients work in internal/core/adapters/client/
Exploring the HTTP handlers in cmd/trading/transport/rest/

==========================================================================================================================


Project Overview

Setbull Trader appears to be a trading platform that integrates with multiple brokerages (primarily Dhan and Upstox) and provides tools for algorithmic trading, candle data analysis, and trade execution.
Main Directory Structure
Root-level Configuration and Documentation

    application.yaml and application.dev.yaml: Configuration files for different environments
    Dockerfile and Makefile: Build and deployment automation
    README.md and GOALS/: Project documentation and roadmap

Core Application Structure

    cmd/: Entry points and HTTP server implementation
    internal/: Core business logic, separated into logical domains
    pkg/: Reusable packages that could be externalized
    upstox/ and dhan/: API client libraries for these brokerages

Frontend

    frontend/: A Svelte-based frontend application

Key Components Explained
cmd/trading/

This is where the application's entry points and HTTP server implementation live:

    app/: Application initialization
    transport/: HTTP transport layer and REST API handlers

internal/

Contains the core business logic:

    core/: Core abstractions including:
        adapters/client/: External API clients (Dhan, Upstox)
        dto/: Data Transfer Objects for request/response
        service/orders/: Order execution service
    domain/: Domain models, including:
        models.go: Core entity definitions (Stock, ExecutionPlan, etc.)
        candle.go: Candle data models for technical analysis
    repository/: Data access layer
        interfaces.go: Repository interfaces
        postgres/: PostgreSQL implementations
    service/: Business logic services
        Trading services (execution, fibonacci calculations)
        Candle data processing and aggregation
        Stock management
    trading/: Trading-specific configurations and services

pkg/

Reusable packages:

    apperrors/: Error handling
    cache/: Caching implementations (Redis, in-memory)
    database/: Database connections and migrations
    log/: Logging utilities
    util/: Various utilities, including stock parsing

Key Features

    Stock Management: Selecting stocks, managing parameters
    Trade Execution: Creating execution plans with Fibonacci levels
    Candle Data: Historical data retrieval and analysis
    Brokerage Integration: Connections to Dhan and Upstox APIs

Database Schema

The application uses a PostgreSQL database with tables for:

    Stocks
    Trade parameters
    Execution plans
    Order executions
    Candle data

Development Flow

As a new contributor, you might focus on:

    Understanding the domain models in internal/domain/
    Examining the service implementations in internal/service/
    Learning how the API clients work in internal/core/adapters/client/
    Exploring the HTTP handlers in cmd/trading/transport/rest/

Would you like me to elaborate on any specific part of the codebase that interests you?

What is the code pattern that I follow?
1. Whenever I write a new API
2. Whenever I am trying to integrate a new stock broker vendor
3. Whenever I'm trying to integrate new data source source, for example, currently I am using my sequel, but as of now, I am getting a sense that because of data is a time series Zita, I can use a timesheet database.

Let me analyze the code patterns you're following for each of these scenarios.
1. When Writing a New API

Your API development follows a clean, layered architecture pattern:
API Development Pattern:

    Handler Definition:
        Create a new handler in cmd/trading/transport/rest/ directory
        Implement standard HTTP handlers that parse requests and return responses
    DTO Definition:
        Define request/response DTOs in internal/core/dto/request/ and internal/core/dto/response/
        Validate input at the handler level
    Service Implementation:
        Add business logic in a service under internal/service/
        Services are responsible for orchestrating repositories and domain logic
    Repository Interface:
        Define repository interfaces in internal/repository/interfaces.go
        Implement concrete repositories in internal/repository/postgres/
    Domain Models:
        Define or extend domain models in internal/domain/
    Error Handling:
        Use standardized error handling from pkg/apperrors/

Example Flow:

    Client calls API endpoint
    Handler validates request
    Handler calls service
    Service orchestrates repositories and domain logic
    Repository interacts with database
    Response flows back up through the layers

2. When Integrating a New Stock Broker Vendor

You follow an adapter pattern for broker integrations:
Broker Integration Pattern:

    Client Configuration:
        Create configuration models in internal/core/adapters/client/{broker}/config.go
    Client Implementation:
        Implement HTTP client in internal/core/adapters/client/{broker}/{broker}_client.go
        Define model structs to match the broker's API in models.go
    Service Adapters:
        Create service adapters in internal/core/service/ that use the client
        Map broker-specific models to internal domain models
    Authentication Handling:
        Implement authentication in auth_service.go for the broker
        Store tokens securely using a repository pattern

Example: Upstox/Dhan Integration

    Created clients for both brokers
    Implemented token management for authentication
    Mapped vendor-specific models to domain models

3. When Integrating a New Data Source

You use a repository pattern for data sources:
Data Source Integration Pattern:

    Repository Interface:
        Define or extend interfaces in internal/repository/interfaces.go
        Add methods specific to the new data source requirements
    Repository Implementation:
        Create new implementation files for the specific technology
        Current implementations are in internal/repository/postgres/
    Database Migrations:
        Create migrations in pkg/database/migrations/
        Use a version-based naming convention (timestamp prefix)
    Configuration:
        Update configuration in internal/trading/config/
        Add connection parameters
